{"ast":null,"code":"var _jsxFileName = \"/Users/rachel/Desktop/A4-How-does-Coronavirus-spread/my-app/src/LineChart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport dataImported from './sample.csv';\nconst format = d3.timeFormat(\"%m-%d\");\nconst dataCSV = d3.csv(dataImported, function convert(d) {\n  return {\n    date: format(new Date(d.date)),\n    value: +d.value\n  };\n});\nconsole.log(dataCSV);\n\nclass LineChart extends Component {\n  componentDidMount() {\n    this.drawChart(dataCSV);\n  }\n\n  drawChart(data) {\n    const width = 960;\n    const height = 500;\n    const margin = {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n    const xScale = d3.scaleTime().domain(d3.extent(data, d => d.date)).range([margin.left, width - margin.right]);\n    const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.positive)]).nice().range([height - margin.bottom, margin.top]);\n    const xAxis = d3.axisBottom().ticks(d3.timeDay.every(1)).tickFormat(d3.timeFormat('%m/%d')).scale(xScale);\n    const yAxis = d3.axisLeft().ticks(10).scale(yScale);\n    const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.positive));\n    const svg = d3.select(this.refs.chart).append(\"svg\").attr('width', width).attr('height', height);\n    svg.append(\"g\").attr(\"transform\", `translate(0,${height - margin.bottom})`).call(xAxis);\n    svg.append(\"g\").attr(\"transform\", `translate(${margin.left},0)`).call(yAxis);\n    const g = svg.selectAll(\"g\").data(data).enter().append(\"g\");\n    g.append(\"path\").attr(\"stroke-width\", 2).attr(\"stroke\", \"steelblue\").attr(\"fill\", \"none\").attr(\"d\", line(data)); // g.append(\"circle\")\n    //      .attr(\"r\", 3.5)\n    //      .attr(\"stroke\", \"steelblue\")\n    //      .attr(\"fill\", \"steelblue\")\n    //      .attr(\"cx\", function(d) { return xScale(d.date); })\n    //      .attr(\"cy\", function(d) { return yScale(d.positive); })\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 20\n      }\n    });\n  }\n\n}\n\nexport default LineChart;","map":{"version":3,"sources":["/Users/rachel/Desktop/A4-How-does-Coronavirus-spread/my-app/src/LineChart.js"],"names":["React","Component","d3","dataImported","format","timeFormat","dataCSV","csv","convert","d","date","Date","value","console","log","LineChart","componentDidMount","drawChart","data","width","height","margin","top","right","bottom","left","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","max","positive","nice","xAxis","axisBottom","ticks","timeDay","every","tickFormat","scale","yAxis","axisLeft","line","x","y","svg","select","refs","chart","append","attr","call","g","selectAll","enter","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport * as d3 from \"d3\"\nimport dataImported from './sample.csv';\n\nconst format = d3.timeFormat(\"%m-%d\")\n\nconst dataCSV = d3.csv(dataImported, function convert(d) {\n  return {\n    date: format(new Date(d.date)),\n    value: +d.value\n  };\n})\n\nconsole.log(dataCSV)\n\n\nclass LineChart extends Component {\n\n  componentDidMount() {\n    this.drawChart(dataCSV)\n  }\n\n  drawChart(data) {\n    const width = 960;\n    const height = 500;\n    const margin = {top: 50, right: 50, bottom: 50, left:50};\n\n    const xScale = d3.scaleTime()\n      .domain(d3.extent(data, d => d.date))\n      .range([margin.left, width - margin.right]);\n\n    const yScale = d3.scaleLinear()\n      .domain ([0, d3.max(data, d => d.positive)]).nice()\n      .range([height - margin.bottom, margin.top])\n\n    const xAxis = d3.axisBottom()\n      .ticks(d3.timeDay.every(1))\n      .tickFormat(d3.timeFormat('%m/%d'))\n      .scale(xScale);\n\n    const yAxis = d3.axisLeft()\n      .ticks(10)\n      .scale(yScale);\n\n    const line = d3.line()\n      .x(d => xScale(d.date))\n      .y(d => yScale(d.positive))\n\n    const svg = d3.select(this.refs.chart)\n      .append(\"svg\")\n      .attr('width', width )\n      .attr('height', height )\n\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n      .call(xAxis);\n\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},0)`)\n      .call(yAxis);\n\n    const g = svg.selectAll(\"g\")\n      .data(data)\n      .enter()\n        .append(\"g\")\n\n    g.append(\"path\")\n         .attr(\"stroke-width\", 2)\n         .attr(\"stroke\", \"steelblue\")\n         .attr(\"fill\", \"none\")\n         .attr(\"d\", line(data))\n\n    // g.append(\"circle\")\n    //      .attr(\"r\", 3.5)\n    //      .attr(\"stroke\", \"steelblue\")\n    //      .attr(\"fill\", \"steelblue\")\n    //      .attr(\"cx\", function(d) { return xScale(d.date); })\n    //      .attr(\"cy\", function(d) { return yScale(d.positive); })\n  }\n\n  render() {return <div ref=\"chart\"></div>}\n}\n\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}